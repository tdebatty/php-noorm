<?php

namespace noorm;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-09-06 at 08:13:00.
 */
class DatasetTest extends \PHPUnit_Framework_TestCase {

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    Persistent::SetDirectory(tempdir());
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @covers noorm\Dataset::Load
   * @todo   Implement testLoad().
   */
  public function testLoad() {
    
  }

  /**
   * @covers noorm\Dataset::Filter
   */
  public function testFilter() {
    for ($i = 0; $i < 20; $i++) {
      $c = new Client();
      $c->SetVal($i);
      $c->Save();
    }

    $c = Client::All()
        ->Filter(function($c) {
          return $c->GetVal() > 10;
        })
        ->Count();

    $this->assertEquals(9, $c);
  }

  /**
   * @covers noorm\Dataset::Limit
   */
  public function testLimit() {
    for ($i = 0; $i < 20; $i++) {
      $c = new Client();
      $c->SetVal($i);
      $c->Save();
    }

    $c = Client::All()
        ->Limit(2, 5)
        ->Count();

    $this->assertEquals(5, $c);
  }

  /**
   * @covers noorm\Dataset::SortBy
   */
  public function testSortBy() {
    for ($i = 0; $i < 20; $i++) {
      $c = new Client();
      $c->SetVal($i);
      $c->Save();
    }

    $c = Client::All()
        ->SortBy("val", false)
        ->Limit(0, 1)
        ->Collect();

    $this->assertEquals(19, current($c)->GetVal());
  }

  /**
   * @covers noorm\Dataset::Map
   */
  public function testMap() {
    for ($i = 0; $i < 20; $i++) {
      $c = new Client();
      $c->SetVal($i);
      $c->Save();
    }

    $r = Client::All()
        ->Map(function($c) {
          return $c->GetVal() * 2;
        })
        ->Count();


    $this->assertEquals(20, $r);
  }

  /**
   * @covers noorm\Dataset::FlatMap
   */
  public function testFlatMap() {
    for ($i = 0; $i < 20; $i++) {
      $c = new Client();
      $c->SetVal($i);
      $c->Save();
    }

    $r = Client::All()
        ->FlatMap(function($c) {
          return array(
            $c->GetVal() * 2,
            $c->GetVal() * 3
          );
        })
        ->Collect();


    $this->assertEquals(40, count($r));
  }

  /**
   * @covers noorm\Dataset::Sort
   * @todo   Implement testSort().
   */
  public function testSort() {
    for ($i = 0; $i < 20; $i++) {
      $c = new Client();
      $c->SetVal($i);
      $c->Save();
    }
    
    $c = Client::All()->Sort(function($c1, $c2){
      // Sort by descending value
      return $c1->getVal() < $c2->getVal();
    })->First();
    
    $this->assertEquals(19, $c->getVal());
  }

  /**
   * @covers noorm\Dataset::Count
   */
  public function testCount() {
    for ($i = 0; $i < 20; $i++) {
      $c = new Client();
      $c->SetVal($i);
      $c->Save();
    }

    $r = Client::All()
        ->Map(function($c) {
          return $c->GetVal() * 2;
        })
        ->Count();


    $this->assertEquals(20, $r);
  }

  /**
   * @covers noorm\Dataset::Reduce
   */
  public function testReduce() {
    for ($i = 0; $i < 4; $i++) {
      $c = new Client();
      $c->SetVal($i);
      $c->Save();
    }

    $total = Client::All()
        ->Reduce(function($aggregator, $client) {
      return $aggregator + $client->getVal();
    }, 0);

    $this->assertEquals(6, $total);
  }
}


