<?php

namespace noorm;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-09-05 at 10:03:10.
 */
class PersistentTest extends \PHPUnit_Framework_TestCase {

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    Persistent::SetDirectory(tempdir());
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @covers noorm\Persistent::All
   */
  public function testAll() {
    $c = new Client();
    $c->name = "C1";
    $c->Save();
    
    $c = new Client();
    $c->name = "C2";
    $c->Save();
    
    $this->assertEquals(2, Client::All()->Count());
  }


  /**
   * @covers noorm\Persistent::Factory
   */
  public function testFactory() {
    $name = "Nobody";
    Client::Factory()->SetName($name)->Save();
    
    /* @var $c Client */
    $c = Client::All()->First();
    
    $this->assertEquals($name, $c->name);
  }

  /**
   * @expectedException \Exception
   * @covers noorm\Persistent::Validate
   */
  public function testValidate() {
    $nv = new NoValidate();
    $nv->Save();
  }

  /**
   * @covers noorm\Persistent::Save
   */
  public function testSave() {

    $name = "New client";
    $client = new Client();
    $client->name = $name;
    $client->Save();
    $id = $client->Id();
    
    $same_client = Client::One($id);
    $this->assertEquals($same_client->name, $name);
  }

  /**
   * @covers noorm\Persistent::Delete
   */
  public function testDelete() {

    // Save one
    $name = "New client";
    $client = new Client();
    $client->name = $name;
    $client->Save();
    $id = $client->Id();
    
    // Delete one
    $same_client = Client::One($id);
    $same_client->Delete();
    
    // Zero should remain...
    $this->assertEquals(0, Client::All()->Count());
  }
  
  /**
   * Test if private properties are correctly saved
   */
  public function testPrivate() {
    $val = "Some value...";
    $client = new Client();
    $client->SetVal($val);
    $client->Save();
    
    /* @var $same_client Client */
    $same_client = Client::One($client->Id());
    $this->assertEquals($val, $same_client->GetVal());
  }
  
  /**
   * Test that static properties are NOT saved
   */
  public function testStatic() {
    
  }
  
  /**
   * Test if array properties are correctly saved
   */
  public function testArray() {
    $val = array("a", "b", "c");
    $client = new Client();
    $client->SetVal($val);
    $client->Save();
    
    $same_client = Client::One($client->Id());
    $this->assertInternalType("array", $same_client->getVal());
  }
  
  /**
   * Test if object properties are correctly saved
   */
  public function testObject() {
    
  }

  /**
   * @covers noorm\Persistent::Parse
   */
  public function testParse() {
    $name = "Client's name";
    $values = array("name" => $name);
    $client = new Client();
    $client->Parse($values);
    
    $this->assertEquals($client->name, $name);
  }
  
  public function testReferences() {
    $client = new Client();
    $client->name = "Yo...";
    
    $id = $client->Id();
    $c2 = Client::One($id);
    $this->assertEquals($client, $c2);
        
  }

}
