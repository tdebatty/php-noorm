<?php

namespace noorm;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-09-05 at 10:03:10.
 */
class PersistentTest extends \PHPUnit_Framework_TestCase {

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    Persistent::SetDirectory(tempdir());
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    
  }

  /**
   * @covers noorm\Persistent::All
   * @todo   Implement testAll().
   */
  public function testAll() {
    $c = new Client();
    $c->name = "C1";
    $c->Save();
    
    $c = new Client();
    $c->name = "C2";
    $c->Save();
    
    $this->assertEquals(2, Client::All()->Count());
  }

  /**
   * @covers noorm\Persistent::One
   * @todo   Implement testOne().
   */
  public function testOne() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers noorm\Persistent::Factory
   * @todo   Implement testFactory().
   */
  public function testFactory() {
    $name = "Nobody";
    Client::Factory()->SetName($name)->Save();
    
    /* @var $c Client */
    $c = Client::All()->First();
    
    $this->assertEquals($name, $c->name);
  }

  /**
   * @covers noorm\Persistent::SetDirectory
   * @todo   Implement testSetDirectory().
   */
  public function testSetDirectory() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers noorm\Persistent::GetDirectory
   * @todo   Implement testGetDirectory().
   */
  public function testGetDirectory() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers noorm\Persistent::__sleep
   * @todo   Implement test__sleep().
   */
  public function test__sleep() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers noorm\Persistent::__wakeup
   * @todo   Implement test__wakeup().
   */
  public function test__wakeup() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers noorm\Persistent::Id
   * @todo   Implement testId().
   */
  public function testId() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers noorm\Persistent::Validate
   * @todo   Implement testValidate().
   */
  public function testValidate() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
        'This test has not been implemented yet.'
    );
  }

  /**
   * @covers noorm\Persistent::Save
   * @todo   Implement testSave().
   */
  public function testSave() {

    $name = "New client";
    $client = new Client();
    $client->name = $name;
    $client->Save();
    $id = $client->Id();
    
    $same_client = Client::One($id);
    $this->assertEquals($same_client->name, $name);
  }

  /**
   * @covers noorm\Persistent::Delete
   * @todo   Implement testDelete().
   */
  public function testDelete() {

    // Save one
    $name = "New client";
    $client = new Client();
    $client->name = $name;
    $client->Save();
    $id = $client->Id();
    
    // Delete one
    $same_client = Client::One($id);
    $same_client->Delete();
    
    // Zero should remain...
    $this->assertEquals(0, Client::All()->Count());
  }
  
  /**
   * Test if private properties are correctly saved
   */
  public function testPrivate() {
    $val = "Some value...";
    $client = new Client();
    $client->SetVal($val);
    $client->Save();
    
    /* @var $same_client Client */
    $same_client = Client::One($client->Id());
    $this->assertEquals($val, $same_client->GetVal());
  }
  
  /**
   * Test that static properties are NOT saved
   */
  public function testStatic() {
    
  }
  
  /**
   * Test if array properties are correctly saved
   */
  public function testArray() {
    
  }
  
  /**
   * Test if object properties are correctly saved
   */
  public function testObject() {
    
  }

  /**
   * @covers noorm\Persistent::Parse
   * @todo   Implement testParse().
   */
  public function testParse() {
    $name = "Client's name";
    $values = array("name" => $name);
    $client = new Client();
    $client->Parse($values);
    
    $this->assertEquals($client->name, $name);
  }

}

class Client extends Persistent {

  public $name = "";
  private $val;
  
  public function SetName($name) {
    $this->name = $name;
    return $this;
  }

  public function GetVal() {
    return $this->val;
  }

  public function SetVal($val) {
    $this->val = $val;
    return $this;
  }
}

function tempdir($dir = null, $prefix = 'php') {
  if ($dir === null) {
    $dir = sys_get_temp_dir();
  }
  $tempfile = tempnam($dir, $prefix);
  if (file_exists($tempfile)) {
    unlink($tempfile);
  }
  mkdir($tempfile);
  if (is_dir($tempfile)) {
    return $tempfile;
  }
}
